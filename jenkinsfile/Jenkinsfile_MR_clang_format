def setCommitStatus(String pStatus, String errorHint = '') {
    switch (pStatus) {
        case 'running':
            pState = 'running'
            pMessage = ""
            break
        case 'success':
            pState = 'success'
            pMessage = ":white_check_mark: ${env.JOB_NAME} :page_with_curl: <b>ClangFormat</b> SUCCEEDED :muscle:<br/>Build results: [Jenkins [${env.BUILD_DISPLAY_NAME}]](${env.RUN_DISPLAY_URL})<br/>Commit: ${env.GIT_COMMIT}"
            break
        case 'aborted':
            pState = 'canceled'
            pMessage = ":interrobang: ${env.JOB_NAME} :page_with_curl: <b>ClangFormat</b> ABORTED :confused:<br/>Build results: [Jenkins [${env.BUILD_DISPLAY_NAME}]](${env.RUN_DISPLAY_URL})<br/>Commit: ${env.GIT_COMMIT}"
            break
        case 'failure':
            pState = 'failed'
            pMessage = ":red_circle: ${env.JOB_NAME} :page_with_curl: <b>ClangFormat</b> FAILURE :worried:<br/>Build results: [Jenkins [${env.BUILD_DISPLAY_NAME}]](${env.RUN_DISPLAY_URL})<br/>Commit: ${env.GIT_COMMIT}"
            break
        case 'unstable':
            pState = 'failed'
            pMessage = ":interrobang: ${env.JOB_NAME} :page_with_curl: <b>ClangFormat</b> UNSTABLE :confused:<br/>Build results: [Jenkins [${env.BUILD_DISPLAY_NAME}]](${env.RUN_DISPLAY_URL})<br/>Commit: ${env.GIT_COMMIT}"
            break
        default:
            pState = 'failed'
            pMessage = ":interrobang: ${env.JOB_NAME} :page_with_curl: <b>ClangFormat</b> UNKNOWN :confused:<br/>Build results: [Jenkins [${env.BUILD_DISPLAY_NAME}]](${env.RUN_DISPLAY_URL})<br/>Commit: ${env.GIT_COMMIT}"
    }
    if (pMessage) {
        if (errorHint) {
            pMessage += '<br/> ' + errorHint
        }
        addGitLabMRComment(comment: pMessage)
    }
    updateGitlabCommitStatus(name: "${PIPELINE_NAME}", state: pState)
}

pipeline {
    agent { label 'docker' }
    options {
        timeout(time: 300, unit: 'MINUTES')
        buildDiscarder(logRotator(numToKeepStr: '135', daysToKeepStr: '21'))
        gitLabConnection('GitLabConnectionJenkins')
        ansiColor('xterm')
    }
    environment {
        PIPELINE_NAME = 'Clang Format'
        SDK_BRANCH = 'master'
    }
    stages {
        stage('Checkout SDK'){
            steps {
                dir('third-party/mega'){
                    sh "echo Cloning SDK branch ${SDK_BRANCH}"
                    checkout([
                        $class: 'GitSCM',
                        branches: [[name: "origin/${SDK_BRANCH}"]],
                        userRemoteConfigs: [[ url: "${env.GIT_URL_SDK}", credentialsId: "12492eb8-0278-4402-98f0-4412abfb65c1" ]],
                        extensions: [
                            [$class: "UserIdentity",name: "jenkins", email: "jenkins@jenkins"]
                        ]
                    ])
                }
                script{
                    megachat_sources_workspace = WORKSPACE
                    sdk_sources_workspace = "${megachat_sources_workspace}/third-party/mega"
                    // Get .clang-format file from SDK repo
                    sh "cp -v ${sdk_sources_workspace}/.clang-format ${megachat_sources_workspace}"
                }
            }
        }
        stage('Clang format'){
            agent {
                docker {
                    image "${env.MEGA_INTERNAL_DOCKER_REGISTRY}:8443/clang-format-sdk:latest"
                    reuseNode true
                }
            }
            steps {
                sh """#!/bin/bash

                    COMMITS=\$(git log --pretty=format:%H origin/${env.gitlabTargetBranch}..origin/${env.gitlabSourceBranch})

                    echo "    ######################"
                    echo "    # ClangFormat output #"
                    echo "    ######################"
                    echo ""
                    echo "    Commits:" \$COMMITS
                    echo ""

                    for COMMIT in \$COMMITS
                    do
                        OUTPUT=\$(git -c color.ui=always clang-format --diff \
                            --extensions "c,c++,c++m,cc,ccm,cp,cpp,cppm,cxx,cxxm,h,hh,hpp,hxx" \
                            \$COMMIT^ \$COMMIT)

                        echo "    Commit: " "\$COMMIT"
                        echo "    ClangFormat:"
                        echo "    \$OUTPUT"
                        echo ""

                        if [ -z "\$OUTPUT" ]
                        then
                            continue
                        fi

                        if echo \$OUTPUT | grep -q 'no modified files to format'
                        then
                            continue
                        fi

                        if echo \$OUTPUT | grep -q 'clang-format did not modify any files'
                        then
                            continue
                        fi

                        printf '%s\\n' "\$OUTPUT" '%s\\n'

                        exit 1
                    done

                    echo "    #############################"
                    echo "    # End of ClangFormat output #"
                    echo "    #############################"
                    echo ""
                """
            }
        }
    }
    post {
        always {
            deleteDir()
        }
        success {
            setCommitStatus('success')
        }
        failure {
            setCommitStatus('failure')
        }
        aborted {
            setCommitStatus('aborted')
        }
        unstable {
            setCommitStatus('unstable')
        }
    }
}
// vim: syntax=groovy tabstop=4 shiftwidth=4
