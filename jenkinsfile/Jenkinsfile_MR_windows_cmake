def setCommitStatus(String pStatus, String errorHint = '') {
    switch (pStatus) {
        case 'running':
            pState = 'running'
            pMessage = ""
            break
        case 'success':
            pState = 'success'
            pMessage = ":white_check_mark: ${env.JOB_NAME} <b>Windows</b> SUCCEEDED :muscle:<br/>Build results: [Jenkins [${env.BUILD_DISPLAY_NAME}]](${env.RUN_DISPLAY_URL})<br/>Commit: ${env.GIT_COMMIT}"
            break
        case 'aborted':
            pState = 'canceled'
            pMessage = ":interrobang: ${env.JOB_NAME} <b>Windows</b> ABORTED :confused:<br/>Build results: [Jenkins [${env.BUILD_DISPLAY_NAME}]](${env.RUN_DISPLAY_URL})<br/>Commit: ${env.GIT_COMMIT}"
            break
        case 'failure':
            pState = 'failed'
            pMessage = ":red_circle: ${env.JOB_NAME} <b>Windows</b> FAILURE :worried:<br/>Build results: [Jenkins [${env.BUILD_DISPLAY_NAME}]](${env.RUN_DISPLAY_URL})<br/>Commit: ${env.GIT_COMMIT}"
            break
        case 'unstable':
            pState = 'failed'
            pMessage = ":interrobang: ${env.JOB_NAME} <b>Windows</b> UNSTABLE :confused:<br/>Build results: [Jenkins [${env.BUILD_DISPLAY_NAME}]](${env.RUN_DISPLAY_URL})<br/>Commit: ${env.GIT_COMMIT}"
            break
        default:
            pState = 'failed'
            pMessage = ":interrobang: ${env.JOB_NAME} <b>Windows</b> UNKNOWN :confused:<br/>Build results: [Jenkins [${env.BUILD_DISPLAY_NAME}]](${env.RUN_DISPLAY_URL})<br/>Commit: ${env.GIT_COMMIT}"
    }
    if (pMessage) {
        if (errorHint) {
            pMessage += '<br/> ' + errorHint
        }
        addGitLabMRComment(comment: pMessage)
    }
    updateGitlabCommitStatus(name: "${PIPELINE_NAME}", state: pState)
}

pipeline {
    agent { label 'windows && amd64' }
    options {
        timeout(time: 300, unit: 'MINUTES')
        buildDiscarder(logRotator(numToKeepStr: '135', daysToKeepStr: '21'))
        gitLabConnection('GitLabConnectionJenkins')
    }
    environment {
        BUILD_OPTIONS = ' '
        APIURL_TO_TEST = ' '
        PIPELINE_NAME = 'Windows build'
        RUN_TESTS = false
    }
    stages {
        stage('clean previous runs and update gitlab commit status'){
            steps{
                deleteDir()
                setCommitStatus('running')
                updateGitlabCommitStatus(name: 'Linux build & test', state: 'running')
            }
        }
        stage('Get current build description'){
            steps{
                script{
                    println "${env.gitlabMergeRequestDescription}"
                    env.currentBuildDescription = currentBuild.description
                }
            }
        }
        stage('Get build options'){
            steps {
                script{
                    BUILD_OPTIONS = sh(script: 'echo "$gitlabTriggerPhrase" | grep BUILD_OPTIONS | awk -F "BUILD_OPTIONS="  \'{print \$2}\' | cut -d"\\"" -f2 || :', returnStdout: true).trim()
                    println BUILD_OPTIONS          
                    }
            }
            post{
                failure {
                    setCommitStatus('failure', 'Failure when getting the additional build parameters. Is `BUILD_OPTIONS` variable well defined?')
                }
                aborted {
                    setCommitStatus('aborted')
                }
            }
        }
        stage('Get SDK branch'){
            when {
                expression {
                    env.gitlabMergeRequestDescription.contains('SDK_BRANCH_TO_TEST')
                }
            }
            steps {
                script{
                    env.SDK_BRANCH = sh(script: 'echo "$gitlabMergeRequestDescription" | grep SDK_BRANCH_TO_TEST | awk -F "SDK_BRANCH_TO_TEST="  \'{print \$2}\' | cut -d" " -f1', returnStdout: true).trim()
                    println SDK_BRANCH
                    if (SDK_BRANCH == ""){
                        echo "SDK_BRANCH was not found on description so develop will be used by default"
                    }
                }
            }
            post{
                failure {
                    setCommitStatus('failure', 'Failure when getting SDK branch. Is `SDK_BRANCH` variable well defined?')
                }
                aborted {
                    setCommitStatus('aborted')
                }
            }
        }
        stage('Get API URL'){
            when {
                expression {
                    env.gitlabMergeRequestDescription.contains('USE_APIURL_TO_TEST')
                }
            }
            steps {
                script{
                    APIURL_TO_TEST = sh(script: 'echo "$gitlabMergeRequestDescription" | grep USE_APIURL_TO_TEST | awk -F "USE_APIURL_TO_TEST="  \'{print \$2}\' | cut -d" " -f1', returnStdout: true).trim()
                        println APIURL_TO_TEST
                    if (APIURL_TO_TEST == ""){
                        APIURL_TO_TEST = "https://g.api.mega.co.nz/"
                        echo "APIURL_TO_TEST was not found on description so ${APIURL_TO_TEST} will be used by default"
                    }
                    echo "APIURL_TO_TEST will be ${APIURL_TO_TEST}"
                }
            }
            post{
                failure {
                    setCommitStatus('failure', 'Failure when getting API URL. Is `APIURL_TO_TEST` variable well defined?')
                }
                aborted {
                    setCommitStatus('aborted')
                }
            }
        }
        stage('Checkout SDK and MEGAchat'){
            steps {
                sh "echo cloning MEGAchat branch ${env.gitlabSourceBranch} and merging with ${env.gitlabTargetBranch}"
                checkout([
                    $class: 'GitSCM', 
                    branches: [[name: "origin/${env.gitlabSourceBranch}"]],
                    userRemoteConfigs: [[ url: "${env.GIT_URL_MEGACHAT}", credentialsId: "12492eb8-0278-4402-98f0-4412abfb65c1" ]],
                    extensions: [
                        [$class: "UserIdentity",name: "jenkins", email: "jenkins@jenkins"],
                        [$class: 'PreBuildMerge', options: [fastForwardMode: 'FF', mergeRemote: "origin", mergeStrategy: 'DEFAULT', mergeTarget: "${env.gitlabTargetBranch}"]]
                        ]                        
                ])
                dir('third-party\\mega'){
                    sh "echo Cloning SDK branch ${SDK_BRANCH}"
                    checkout([
                        $class: 'GitSCM',
                        branches: [[name: "origin/${SDK_BRANCH}"]],
                        userRemoteConfigs: [[ url: "${env.GIT_URL_SDK}", credentialsId: "12492eb8-0278-4402-98f0-4412abfb65c1" ]],
                        extensions: [
                            [$class: "UserIdentity",name: "jenkins", email: "jenkins@jenkins"]
                        ]
                    ])
                }
                script{
                    megachat_sources_workspace = WORKSPACE
                }
            }
            post{
                failure {
                    setCommitStatus('failure')
                }
                aborted {
                    setCommitStatus('aborted')
                }
            }
        }
        stage('Build MEGAchat'){
            environment{
                VCPKGPATH  = "${megachat_sources_workspace}\\..\\vcpkg"
                _MSPDBSRV_ENDPOINT_ = "${BUILD_TAG}"
                TMP       = "${megachat_sources_workspace}\\tmp"
                TEMP      = "${megachat_sources_workspace}\\tmp"
                TMPDIR    = "${megachat_sources_workspace}\\tmp"
                BUILD_DIR = "build_dir"
            }
            steps{
                dir(megachat_sources_workspace){
                    sh """
                        sed -i "s#MEGAChatTest#${env.USER_AGENT_TESTS}#g" tests/sdk_test/sdk_test.h
                    """
                    sh "echo Building SDK"
                    sh "cmake -DENABLE_CHATLIB_WERROR=ON -DCMAKE_BUILD_TYPE=Debug -DVCPKG_ROOT='${VCPKGPATH}' ${BUILD_OPTIONS} -DCMAKE_VERBOSE_MAKEFILE=ON \
                    -DENABLE_CHATLIB_QTAPP=OFF -DENABLE_CHATLIB_TESTS=ON -DUSE_FFMPEG=OFF -DUSE_FREEIMAGE=OFF \
                    -S '${megachat_sources_workspace}' -B '${megachat_sources_workspace}'\\\\${BUILD_DIR}\\\\"
                    sh "cmake --build '${megachat_sources_workspace}'\\\\${BUILD_DIR} -j2"
                }

            }
        }
        stage('Upload MEGAclc'){
            when {
                beforeAgent true
                expression { env.gitlabTriggerPhrase != null && env.gitlabTriggerPhrase.contains('--upload_megaclc') }
            }
            environment{
                JF_PATH  = "${megachat_sources_workspace}\\.."
            }
            steps {
                dir('build_dir\\examples\\megaclc\\Debug'){
                    script {
                        uploadMegaclcExecuted = true
                        def windows_artifactory_upload = { String ART_UPLOAD_PATH ->
                        
                            powershell """
                                ${JF_PATH}\\jf config use artifactory
                                ${JF_PATH}\\jf rt del ${ART_UPLOAD_PATH}
                                ${JF_PATH}\\jf rt upload megaclc.exe ${ART_UPLOAD_PATH}
                                ${JF_PATH}\\jf rt upload megaclc.pdb ${ART_UPLOAD_PATH}
                            """
                        }
                        windows_artifactory_upload("MEGAchat/${env.gitlabMergeRequestIid}/windows/megaclc/")
                    }
                }
            }
        }
    }

    post{
        always{
            deleteDir()
        }
        success {
            script{
                if (uploadMegaclcExecuted){
                    addGitLabMRComment(comment: ":white_check_mark: ${currentBuild.projectName} <b>Windows</b>  SUCCEEDED :muscle:<br/>Build results: [Jenkins [${currentBuild.displayName}]](${currentBuild.absoluteUrl})<br/>Commit: ${env.GIT_COMMIT}<br/>MEGAclc URL: [${env.REPO_URL}/MEGAchat/${env.gitlabMergeRequestIid}/windows/megaclc]" )
                    updateGitlabCommitStatus(name: "${PIPELINE_NAME}", state: 'success')                    
                } else {
                   setCommitStatus('success') 
                }
            }
        }
        failure {
            setCommitStatus('failure')
        }
        aborted {
            setCommitStatus('aborted')
        }
        unstable {
            setCommitStatus('unstable')
        }
    }
}
