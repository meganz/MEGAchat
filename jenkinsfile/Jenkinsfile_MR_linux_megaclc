def setCommitStatus(String pStatus, String errorHint = '') {
    switch (pStatus) {
        case 'running':
            pState = 'running'
            pMessage = ""
            break
        case 'success':
            pState = 'success'
            pMessage = ":white_check_mark: ${env.JOB_NAME} :penguin: <b>Linux MEGAclc</b> SUCCEEDED :muscle:<br/>Build results: [Jenkins [${env.BUILD_DISPLAY_NAME}]](${env.RUN_DISPLAY_URL})<br/>Commit: ${env.GIT_COMMIT}<br/>MEGAclc URL: [${env.REPO_URL}/MEGAchat/${env.gitlabMergeRequestIid}/ubuntu2204/megaclc/]"
            break
        case 'aborted':
            pState = 'canceled'
            pMessage = ":interrobang: ${env.JOB_NAME} :penguin: <b>Linux MEGAclc</b> ABORTED :confused:<br/>Build results: [Jenkins [${env.BUILD_DISPLAY_NAME}]](${env.RUN_DISPLAY_URL})<br/>Commit: ${env.GIT_COMMIT}"
            break
        case 'failure':
            pState = 'failed'
            pMessage = ":red_circle: ${env.JOB_NAME} :penguin: <b>Linux MEGAclc</b> FAILURE :worried:<br/>Build results: [Jenkins [${env.BUILD_DISPLAY_NAME}]](${env.RUN_DISPLAY_URL})<br/>Commit: ${env.GIT_COMMIT}"
            break
        case 'unstable':
            pState = 'failed'
            pMessage = ":interrobang: ${env.JOB_NAME} :penguin: <b>Linux MEGAclc</b> UNSTABLE :confused:<br/>Build results: [Jenkins [${env.BUILD_DISPLAY_NAME}]](${env.RUN_DISPLAY_URL})<br/>Commit: ${env.GIT_COMMIT}"
            break
        default:
            pState = 'failed'
            pMessage = ":interrobang: ${env.JOB_NAME} :penguin: <b>Linux MEGAclc</b> UNKNOWN :confused:<br/>Build results: [Jenkins [${env.BUILD_DISPLAY_NAME}]](${env.RUN_DISPLAY_URL})<br/>Commit: ${env.GIT_COMMIT}"
    }
    if (pMessage) {
        if (errorHint) {
            pMessage += '<br/> ' + errorHint
        }
        addGitLabMRComment(comment: pMessage)
    }
    updateGitlabCommitStatus(name: "${PIPELINE_NAME}", state: pState)
}
pipeline {
    agent { label 'docker' }
    options {
        timeout(time: 300, unit: 'MINUTES')
        buildDiscarder(logRotator(numToKeepStr: '60', daysToKeepStr: '21'))
        gitLabConnection('GitLabConnectionJenkins')
    }
    environment {
        VCPKGPATH = "/opt/vcpkg"
        VCPKGPATH_CACHE = "${HOME}/.cache/vcpkg"
        PIPELINE_NAME = 'MEGAclc Ubuntu build'
    }
    stages {
        stage('Clean previous runs'){
            steps{
                deleteDir()
                setCommitStatus('running')
                updateGitlabCommitStatus(name: 'MEGAclc Ubuntu build', state: 'running')
            }
        }
        stage('Get current build description'){
            steps{
                script{
                    println "${env.gitlabMergeRequestDescription}"
                    env.currentBuildDescription = currentBuild.description
                }
            }
        }
        stage('Get SDK branch'){
            steps {
                script{
                    env.SDK_BRANCH = sh(script: 'echo "$gitlabMergeRequestDescription" | grep SDK_BRANCH_TO_TEST | awk -F "SDK_BRANCH_TO_TEST="  \'{print \$2}\' | cut -d" " -f1', returnStdout: true).trim()
                    println SDK_BRANCH
                    if (SDK_BRANCH == ""){
                        echo "SDK_BRANCH was not found on description so develop will be used by default"
                        env.SDK_BRANCH = "develop"
                    }
                    echo "SDK_branch: \"${env.SDK_BRANCH}\""
                }
            }
        }
        stage('Checkout SDK and MEGAchat'){
            when{
                expression {
                    env.gitlabTriggerPhrase != null && env.gitlabTriggerPhrase.startsWith('trigger compilation linux') && env.gitlabTriggerPhrase.contains('--upload_megaclc')
                }
            }
            steps {
                sh "echo cloning MEGAchat branch ${env.gitlabSourceBranch} and merging with ${env.gitlabTargetBranch}"
                checkout([
                    $class: 'GitSCM', 
                    branches: [[name: "origin/${env.gitlabSourceBranch}"]],
                    userRemoteConfigs: [[ url: "${env.GIT_URL_MEGACHAT}", credentialsId: "12492eb8-0278-4402-98f0-4412abfb65c1" ]],
                    extensions: [
                        [$class: "UserIdentity",name: "jenkins", email: "jenkins@jenkins"],
                        [$class: 'PreBuildMerge', options: [fastForwardMode: 'FF', mergeRemote: "origin", mergeStrategy: 'DEFAULT', mergeTarget: "${env.gitlabTargetBranch}"]]
                        ]                        
                ])
                dir('third-party/mega'){
                    sh "echo Cloning SDK branch \"${SDK_BRANCH}\""
                    checkout([
                        $class: 'GitSCM',
                        branches: [[name: "origin/${SDK_BRANCH}"]],
                        userRemoteConfigs: [[ url: "${env.GIT_URL_SDK}", credentialsId: "12492eb8-0278-4402-98f0-4412abfb65c1" ]],
                        extensions: [
                            [$class: "UserIdentity",name: "jenkins", email: "jenkins@jenkins"]
                        ]
                    ])
                }
                script{
                    megachat_sources_workspace = WORKSPACE
                    sdk_sources_workspace = "${megachat_sources_workspace}/third-party/mega"
                }
            }
        }
        stage('Build MEGAchat docker image'){
            steps{
                dir("dockerfile"){
                    sh "docker build -t meganz/megachat-build-env-ub2204:${env.BUILD_NUMBER} -f ./megachat-ubuntu2204-build.dockerfile ."
                }
            }
        }

        stage('Build with docker'){
            steps {
                sh "mkdir build_ubuntu2204"
                sh "docker run --name megachat-builder-x64-ubuntu2204-${env.BUILD_NUMBER} --rm -v ${WORKSPACE}/build_ubuntu2204:/mega/build -v ${WORKSPACE}:/mega/chat -v ${VCPKGPATH}:/mega/vcpkg -v ${VCPKGPATH_CACHE}:/mega/.cache/vcpkg meganz/megachat-build-env-ub2204:${env.BUILD_NUMBER}"
            }
            post{
                aborted {
                    sh "docker kill megachat-builder-x64-ubuntu2204-${env.BUILD_NUMBER}" 
                }
            }  
        }
        stage('Upload MEGAclc'){
            steps {
                withCredentials([string(credentialsId: 'MEGACHAT_ARTIFACTORY_TOKEN', variable: 'MEGACHAT_ARTIFACTORY_TOKEN')]) {
                    sh '''
                        jf rt del \
                            --url ${REPO_URL} \
                            --access-token ${MEGACHAT_ARTIFACTORY_TOKEN} \
                            MEGAchat/${env.gitlabMergeRequestIid}/ubuntu2204/megaclc/ \
                        || true
                    '''
                    dir ("build_ubuntu2204/examples/megaclc/"){
                        sh '''
                            jf rt upload \
                                --url ${REPO_URL} \
                                --access-token ${MEGACHAT_ARTIFACTORY_TOKEN} \
                                megaclc MEGAchat/${env.gitlabMergeRequestIid}/ubuntu2204/megaclc/x64/
                        '''
                    }
                }
            }
        }
    }
    post {
        always {
            sh "docker image rm meganz/megachat-build-env-ub2204:${env.BUILD_NUMBER}"
            deleteDir() /* clean up our workspace */
        }
        success {
            setCommitStatus('success')
        }
        failure {
            setCommitStatus('failure')
        }
        aborted {
            setCommitStatus('aborted')
        }
        unstable {
            setCommitStatus('unstable')
        }
    }
}
